name: PR Builds x64

on:
  push:
    branches: [ master ]
    paths-ignore:
        - "**.md"
        - "**.ini"
  pull_request:
    branches: [ master ]
    paths-ignore:
      - "**.md"
      - "**.ini"

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Netplay, Playback]
        include:
          - build_type: Netplay
            artifact_name: windows64-netplay
            build_config: -DCMAKE_BUILD_TYPE="Release" -DQt5_DIR:STRING="../Externals/Qt/Qt5.14.1/msvc2019_64/lib/cmake/Qt5" -DSLIPPI_PLAYBACK=false
          - build_type: Playback
            artifact_name: windows64-playback
            build_config: -DCMAKE_BUILD_TYPE="Release" -DQt5_DIR:STRING="../Externals/Qt/Qt5.14.1/msvc2019_64/lib/cmake/Qt5"
    env:
      DXSDK_DIR: "C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\"
    name: "Windows ${{ matrix.build_type }}"
    runs-on: windows-2019
    steps:
      - name: "Remove Redistributable"
        shell: cmd
        run: |
          MsiExec.exe /passive /X{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}
          MsiExec.exe /passive /X{1D8E6291-B0D5-35EC-8441-6616F567A0F7} 
      - name: "Setup MSBuild"
        uses: microsoft/setup-msbuild@v1   
      - name: "Install DirectX SDK"
        shell: powershell
        run: |
          choco install directx-sdk
      - name: "Checkout"
        uses: actions/checkout@v2.3.1
        with:
          submodules: recursive
      - name: 'Fetch Git Tags'
        if: success()
        shell: bash
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Build ${{ matrix.build_type }} Dolphin"
        shell: cmd
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build
          cd build
          cmake ${{ matrix.build_config }} ..
          msbuild.exe /v:m /p:Platform=x64 /p:Configuration=Release dolphin-emu.sln
      - name: "Package ${{ matrix.build_type }}"
        working-directory: ${{ github.workspace }}
        run: |
          FILE_NAME="${{ env.CURR_DATE }}-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-${{ matrix.artifact-name }}.zip"
          mkdir artifact
          Xcopy /Y /E /I .\Data\Sys .\Binary\x64\Sys
          cd .\Binary\x64\
          fsutil file createnew portable.txt 0
          fsutil file createnew FIX-VCRUNTIME140-ERROR.txt 0
          echo "Download and install this: https://aka.ms/vs/16/release/vc_redist.x64.exe" > .\FIX-VCRUNTIME140-ERROR.txt
          7z a $FILE_NAME .\*
          move $FILE_NAME ..\..\artifact\
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"